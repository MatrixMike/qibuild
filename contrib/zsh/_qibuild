#compdef qibuild qisrc qitoolchain qitest

# TODO: load functions as in _git

(( $+functions[_qibuild_commands] )) ||
_qibuild_commands() {
  local -a qibuild_commands
  qibuild_commands=(
  add-config:'Add a build configuration.'
  clean:'Clean build directories.'
  config:'Display the current config.'
  configure:'Configure a project.'
  convert:'Convert an existing project to a qiBuild project.'
  depends:'Display dependencies of projects.'
  deploy:'Deploy project(s) on a remote target.'
  find:'Find a package.'
  foreach:'Run the same command on each buildable project.'
  gen-cmake-module:'Generate a -config.cmake file from the contents of a directory.'
  get-licenses:'Get the list of all licenses used by the given projects.'
  info:'Output information about the given project.'
  init:'Initialize a new qibuild worktree.'
  install:'Install a project and its dependencies.'
  list:'List the name and path of every buildable project.'
  list-binaries:'List every all the binaries in the given worktree.'
  list-configs:'List all the known configs.'
  list-profiles:'List the known profiles of the given worktree.'
  make:'Build a project.'
  make-host-tools:'Build host tools projects.'
  open:'Open a project with an IDE.'
  package:'Generate a binary package, ready to be added in a toolchain.'
  rm-config:'Remove the given build config.'
  run:'Run a package found with qibuild find.'
  set-default:'Set the default build config for the given worktree.'
  set-host-config:'Set the configuration to be used when building host tools.'
  sourceme:'Generate and return the path to a suitable "sourceme" file.'
  status:'Display the status of each project.'
  test:'Launch automatic tests -- deprecated, use `qitest run` instead.')

  integer ret=1
  _describe -t qibuild-commands 'commands' qibuild_commands && ret=0
  return ret
}

_arguments_for_qibuild_projects() {
  $@ \
  "(-a --all -s --single -g --group)"{-a,--all}"[Work on all projects.]" \
  "(-s --single -a --all -g --group)"{-s,--single}"[Work on specified projects without taking dependencies into account.]" \
  "(-g,--group -a --all -s --single)"{-g=,--group=}"[Specify a group of projects.]:Groups:(($(qisrc list-groups 2>/dev/null | cut -c3-)))" \
  "--use-deps[Force deps resolution.]" \
  "--build-deps-only[Work on specified projects by ignoring the runtime deps.]" \
  "*:Projects:(($(qibuild list 2>/dev/null | tail -n +3 | cut -c5- | cut -d' ' -f1)))"
}

_arguments_for_qisrc_projects() {
  $@ \
  "(-a --all -s --single -g --group)"{-a,--all}"[Work on all projects.]" \
  "(-s --single -a --all -g --group)"{-s,--single}"[Work on specified projects without taking dependencies into account.]" \
  "(-g,--group -a --all -s --single)"{-g=,--group=}"[Specify a group of projects.]:Groups:(($(qisrc list-groups 2>/dev/null | cut -c3-)))" \
  "--use-deps[Force deps resolution.]" \
  "--build-deps-only[Work on specified projects by ignoring the runtime deps.]" \
  "*:Projects:(($(qisrc list 2>/dev/null | tail -n +3 | cut -c5- | cut -d' ' -f1)))"
}


_arguments_for_qibuild_configs() {
  $@ \
  "(-c --config)"{-c,--config}"[The configuration to use.]:Configurations:(($(qibuild list-configs 2>/dev/null | tail -n +2 | grep "^*" | cut -c3-)))"
}

_arguments_for_qibuild_logging() {
  $@ \
  "(-v --verbose -q --quiet)"{-v,--verbose}"[Output debug messages.]" \
  "(-v --verbose -q --quiet)"{-q,--quiet}"[Only output error messages.]" \
  "--time-stamp[Add timestamps before each log message.]" \
  "--color=[Colorize output.]:When:((always never auto))" \
  "--title=[Update terminal title.]:When:((always never auto))"
}

_arguments_for_qibuild_debug() {
  $@ \
  "--backtrace[Display backtrace on error.]" \
  "--pdb[Use pdb on error.]"
}

_arguments_for_qibuild_configure() {
  $@ \
  "--no-clean-first[Do not clean CMake cache]" \
  "--debug-trycompile[Pass --debug-trycompile to CMake call]" \
  "--eff-c++[Activate warnings from the 'Effective C++' book (gcc only)]" \
  "--werror[Treat warnings as error]" \
  "--profiling[Profile cmake execution]" \
  "--summarize-options[Summarize build options at the end]" \
  "--trace-cmake[Run cmake in trace mode]" \
  "--coverage[Activate coverage support (gcc only)]" \
  "--32-bits[Force 32 bits build]" \
  "(--without-debug-info)--with-debug-info[Include debug information in binaries. Overrides --debug]" \
  "(--with-debug-info)--without-debug-info[Remove debug information from binaries. Overrides --release]" \
  "(--debug)--release[build in release]" \
  "(--release)--debug[build in debug, default]" \
}

_qibuild-add-config() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    "(-t --toolchain)"{-t,--toolchain}"[The toolchain to use.]:Toolchains:(($(qitoolchain list 2>/dev/null | grep '^*' | cut -c3-)))" \
    "(-p --profile)"{-p,--profile}"[The profile to use.]:Profiles:(($(qibuild list-profiles 2>/dev/null | grep "*" | cut -c5-)))" \
    "(-G --cmake-generator)"{-G=,--cmake-generator=}"[The cmake generator to use.]" \
    "--ide=[Ide to use.]" \
    "--default" \
  && return

  return ret
}

_qibuild-clean () {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_projects \
  _arguments_for_qibuild_configs \
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    "-z[Remove all build directories that match a known configuration.]" \
    "-x[Remove build directories that do not match any known configuration.]" \
    "(-f --force)"{-f,--force}"[Force the clean.]" \
  && return

  return ret
}

_qibuild-config() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    "--edit[Edit the configuration.]" \
    "--local[Only display or edit the local configuration.]" \
    "--wizard[Run a wizard to edit the configuration."] \
  && return
}

_qibuild-configure() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_projects \
  _arguments_for_qibuild_configs \
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments_for_qibuild_configure \
  _arguments \
  && return
}

_qibuild-convert() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    "--project-name=[Name of the project.]:Project name:(($(qibuild list 2>/dev/null | cut -c5- | cut -d" " -f1)))" \
    "--go[Actually perform file changes.]" \
    "--dry-run[Only print what would be done. This is the default.]" \
    "--no-cmake[Do not touch any cmake file. You won't be able to use the qibuild cmake framework.]" \
    ": :_files" \
  && return
}

_qibuild-depends() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments_for_qibuild_configs \
  _arguments_for_qibuild_projects \
  _arguments \
    "--runtime[Use runtime dependencies only.]" \
    "--reverse[Show projects that depend on the current project.]" \
    "--tree[Output in text tree format showing paths.]" \
    "--graph[Output in format suitable for the \"dot\" graphing tool.]" \
    "--direct[Only display direct dependencies.]" \
  && return
}

_qibuild-deploy() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments_for_qibuild_configs \
  _arguments_for_qibuild_projects \
  _arguments \
    "--url=[Deploy to each given url.]" \
    "--split-debug[Split debug symbols. Enable remote debuging.]" \
    "--with-tests[Also deploy the tests]" \
  && return
}

_qibuild-find() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments_for_qibuild_configs \
  _arguments_for_qibuild_projects \
  _arguments \
    "--cflags=[Outputs required compiler flags.]" \
    "--libs=[Ouputs required linnker flags.]" \
    "--cmake[Search in cmake cache]" \
  && return
}

_qibuild-foreach() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments_for_qibuild_projects \
  _arguments \
    "(--continue --ignore-errors)"{--continue,--ignore-errors}"[Continue on error]" \
  && return
}

_qibuild-gen-cmake-module() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
  && return
}

_qibuild-get-licenses() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments_for_qibuild_projects \
  _arguments_for_qibuild_configs \
  _arguments \
  && return
}

_qibuild-init() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
  && return
}

_qibuild-install() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_projects \
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments_for_qibuild_configs \
  _arguments \
    "--prefix=[Value of CMAKE_INSTALL_PREFIX.]" \
    "--runtime[Only install the runtime components.]" \
    "--split-debug[Split debug symbols]" \
    "--with-tests[Also install tests]" \
  && return
}

_qibuild-list() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    "(--paths --names)--names[Sort by names.]" \
    "(--paths --names)--paths[Sort by paths.]" \
  && return
}

_qibuild-list-binaries() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
  && return
}

_qibuild-list-configs() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
  && return
}

_qibuild-list-profiles() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
  && return
}

_qibuild-make() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments_for_qibuild_configs \
  _arguments \
    "(-r --rebuild)"{-r,--rebuild}"[Rebuild.]" \
    "--coverity[Build using cov-build. Ensure you have cov-analysis installed on your machine.]" \
    $qibuild_projects \
  && return
}

_qibuild-make-host-tools() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments_for_qibuild_configs \
  _arguments_for_qibuild_configure \
  _arguments \
  && return
}

_qibuild-open() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments_for_qibuild_configs \
  _arguments_for_qibuild_projects \
  _arguments \
  && return
}

_qibuild-package() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments_for_qibuild_configs \
  _arguments_for_qibuild_projects \
  _arguments \
  && return
}

_qibuild-rm-config() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    "*:Configuration name:(($(qibuild list-configs 2>/dev/null | tail -n +2 | grep "^*" | cut -c3-)))" \
  && return
}

_qibuild-run() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments_for_qibuild_configs \
  _arguments \
    ":Binary:(($(qibuild list-binaries)))" \
  && return
}

_qibuild-set-default() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    "*:Configuration name:(($(qibuild list-configs 2>/dev/null | tail -n +2 | grep "^*" | cut -c3-)))" \
  && return
}

_qibuild-set-host-config() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
  && return
}

_qibuild-sourceme() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_projects \
  _arguments_for_qibuild_configs \
  _arguments \
  && return
}

_qibuild-status() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_projects \
  _arguments_for_qibuild_debug \
  _arguments \
  && return
}

_qibuild-test() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_projects \
  _arguments_for_qibuild_debug \
  _arguments_for_qibuild_configs \
  _arguments \
    "--perf[Run perfs tests instead of pure tests]" \
    "(-k --pattern)"{-k,--pattern}="[Filter tests matching these patterns.]" \
    "-V[Display tests output.]" \
    "--valgrind[Run tests under valgrind.]" \
    "--nightmare[Run tests in shuffle and 20 times.]" \
    "--coverage[Run coverage.]" \
    "--ncpu=[Set number of CPU each test is allowed to use (linux).]" \
    "--nightly[Run nighly tests.]" \
    "--break-on-failure[Break on failure (for gtest only).]" \
    "--qitest-json=:[]" \
  && return
}

_qibuild_main() {
  integer ret=1
  local curcontext=$curcontext state line
  declare -A opt_args

  _arguments -C \
    "(-h --help)"{-h,--help}"[Show this help message and exit]" \
    "(-w --worktree --work-tree)"{-w=,--worktree=,--work-tree=}"[Use a specific work tree path.]" \
    "(-): :->command" \
    "(-)*:: :->option-or-argument" \
    && return

  case $state in
    (command)
      _qibuild_commands && ret=0
      ;;
    (option-or-argument)
      curcontext=${curcontext%:*:*}:qibuild-$words[1]:

      _call_function ret _qibuild-$words[1]
      ;;
  esac
  return ret
}

_qisrc_commands() {
  local -a qisrc_commands
  qisrc_commands=(
  add:'Add a new project to a worktree.'
  add-group:'Add a group to the current worktree.'
  check-manifest:'Apply changes from a manifest xml path.'
  checkout:'Change the branch of the manifest.'
  create:'Create a new project.'
  diff:'Display diff with an other branch of the worktree.'
  foreach:'Run the same command on each source project.'
  grep:'Run git grep on every project.'
  info:'Display info about the current git worktree.'
  init:'Init a new qisrc workspace.'
  list:'List the names and paths of every project, or those matching a pattern.'
  list-groups:'List the available groups.'
  log:'Display log between current branch and an other branch of the worktree.'
  maintainers:'Manage the list of maintainers.'
  push:'Push changes for review.'
  rebase:'Rebase repositories on top of an other branch of the manifest.'
  remove:'Remove a project from a worktree.'
  reset:'Reset repositories to a clean state.'
  rm-group:'Remove a group from the current worktree.'
  snapshot:'Generate a snapshot of all the git projects.'
  status:'List the state of all git repositories and exit.'
  sync:'Synchronize the given worktree with its manifest.')

  integer ret=1
  _describe 'qisrc commands' qisrc_commands && ret=0
  return ret
}

_qisrc-add() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    "--src=[Where to clone the project.]" \
    "(-b --branch)"{-b=,--branch=}"[Branch.]" \
    ": :_files" \
  && return
}

_qisrc-add-group() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    ":Group to add:(($(qisrc list-groups 2>/dev/null | grep -v "^\*" | cut -c3-)))" \
  && return
}

_qisrc-check-manifest() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
  && return
}

_qisrc-checkout() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    "(-f --force)"{-f,--force}"[Discard local changes.]" \
  && return
}

_qisrc-create() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    "(-i --input --template-path)"{-i=,--input=,--template-path=}"[Path to the template.]" \
    "--git[Create a git repository.]" \
    "(-o --output)"{-o=,--output=}"[Output of creation.]: :_files" \
  && return
}

_qisrc-diff() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments_for_qisrc_projects \
  _arguments \
  && return
}

_qisrc-foreach() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments_for_qisrc_projects \
  _arguments \
    "--git[Consider only the git projects.]" \
    "(-c --continue --ignore-errors)"{-c,--continue,--ignore-errors}"[Continue on error.]" \
  && return
}

_qisrc-grep() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments_for_qisrc_projects \
  _arguments \
    "--path=[type of patch to print?]: :((none absolute worktree project))" \
  && return
}

_qisrc-info() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
  && return
}

_qisrc-init() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    ": :_files" \
  && return
}

_qisrc-list() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    "(--names --paths)--names[Sort by names.]" \
    "(--names --paths)--paths[Sort by paths.]" \
  && return
}

_qisrc-list-groups() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
  && return
}

_qisrc-log() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments_for_qisrc_projects \
  _arguments \
  && return
}

_qisrc-maintainers() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments_for_qisrc_projects \
  _arguments \
    "(--add --list --remove --clear)--add[Add a new maintainer.]" \
    "(--add --list --remove --clear)--list[List all maintainers.]" \
    "(--add --list --remove --clear)--remove[Remove maintainer.]" \
    "(--add --list --remove --clear)--clear[Remove all maintainers.]" \
    "--name=[Name of the maintainer to add or remove.]" \
    "--email=[Email of the maintainer to add or remove.]" \
  && return
}

_qisrc-push() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments_for_qisrc_projects \
  _arguments \
    {--cc=,--reviewers=}"[Add reviewers (full email or just username if the domain is the same as yours).]" \
    "(-t --topic)"{-t,--topic}"[Add a topic to your code review. Useful for grouping patches together.]" \
  && return
}

_qisrc-rebase() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments_for_qisrc_projects \
  _arguments \
    "--push[Push the rebased branch.]" \
    "--dry-run[Dry run.]" \
    "--force-run[Use push --force.]" \
  && return
}

_qisrc-remove() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    "--from-disk[Also remove project sources from disk.]" \
  && return
}

_qisrc-reset() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments_for_qisrc_projects \
  _arguments \
    "(-f --force)"{-f,--force}"[Discard local changes.]" \
    "--tag=[Reset everything to the given tag.]" \
    "--snapshot=[Reset everything using the given snapshot.]" \
  && return
}

_qisrc-rm-group() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments_for_qisrc_projects \
  _arguments \
    ":Group to delete:(($(qisrc list-groups 2>/dev/null | grep "^\*" | cut -c3-)))" \
  && return
}

_qisrc-snapshot() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments_for_qisrc_projects \
  _arguments \
    "--deprecated-format[Only used for retro-compatibility.]" \
    ": :_files" \
  && return
}

_qisrc-status() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments_for_qisrc_projects \
  _arguments \
    "(-u --untracked-files)"{-u,--untracked-files}"[Display untracked files.]" \
  && return
}

_qisrc-sync() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments_for_qisrc_projects \
  _arguments \
    "--reset[Do the same as \`qisrc reset --all --force\` after the fetch.]" \
    "--rebase-devel[Rebase development branches.]" \
  && return
}

_qisrc_main() {
  integer ret=1
  local curcontext=$curcontext state line
  declare -A opt_args

  _arguments -C \
    "(-h --help)"{-h,--help}"[Show this help message and exit]" \
    "(-w --worktree --work-tree)"{-w=,--worktree=,--work-tree=}"[Use a specific work tree path.]" \
    "(-): :->command" \
    "(-)*:: :->option-or-argument" \
    && return

  case $state in
    (command)
      _qisrc_commands && ret=0
      ;;
    (option-or-argument)
      curcontext=${curcontext%:*:*}:qisrc-$words[1]:

      _call_function ret _qisrc-$words[1]
      ;;
  esac
  return ret
}

_qitoolchain_commands() {
  local -a qitoolchain_commands
  qitoolchain_commands=(
  add-package:'Add a new package to a toolchain.'
  convert-package:'Convert a binary archive into a qiBuild package.'
  create:'Configure a worktree to use a toolchain.'
  extract-package:'Extract a binary toolchain package.'
  import-package:'Convert a binary archive into a qiBuild package and add it to a toolchain.'
  info:'Display a complete description of a toolchain.'
  list:'Display the toolchains names.'
  make-package:'Create a package from a directory.'
  package-info:'Display info about a toolchain package.'
  remove:'Uninstall a toolchain.'
  remove-package:'Remove a package from a toolchain.'
  status:'Display the toolchains status their names, and what projects they provide.'
  svn-status:'Display status of subversion packages in the given toolchain.'
  update:'Update every toolchain using the feed that was used to create them.')

  integer ret=1
  _describe -t qitoolchain-commands 'commands' qitoolchain_commands && ret=0
  return ret
}

_qitoolchain-add-package() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    "(-c --config)"{-c,--config}"[Name of a config to use.]:Configs:(($(qibuild list-configs 2>/dev/null | tail -n +2 | grep "^*" | cut -c3-)))" \
    "(-t --toolchain)"{-t,--toolchain}"[Name of the toolchain to use.]:Toolchains:(($(qitoolchain list 2>/dev/null | grep '*' | cut -c3-)))" \
    "--name=[The name of the package. Useful for legacy package format.]" \
    ": :_files" \
  && return
}

_qitoolchain-convert-package() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    "--name=[The name of the package. Useful for legacy package format.]" \
    "--batch[Do not prompt for cmake module edition.]" \
    ": :_files" \
  && return
}

_qitoolchain-create() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    ": :_files" \
  && return
}

_qitoolchain-extract-package() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    "(-o --output)"{-o,--output}"[Where to extract the files.]" \
    ": :_files" \
  && return
}

_qitoolchain-import-package() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    "(-c --config)"{-c,--config}"[Name of a config to use.]:Configs:(($(qibuild list-configs 2>/dev/null | tail -n +2 | grep "^*" | cut -c3-)))" \
    "(-t --toolchain)"{-t,--toolchain}"[Name of the toolchain to use.]:Toolchains:(($(qitoolchain list 2>/dev/null | grep '*' | cut -c3-)))" \
    "--name=[The name of the package. Useful for legacy package format.]" \
    "--batch[Do not prompt for cmake module edition.]" \
    "(-d --destdir)"{-d,--destdir}"[Destination directory of the qiBuild package after conversion.]" \
    ": :_files" \
  && return
}

_qitoolchain-info() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    ": :(($(qitoolchain list 2>/dev/null | grep '*' | cut -c3-)))" \
  && return
}

_qitoolchain-list() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
  && return
}

_qitoolchain-make-package() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    "(-o --output)"{-o,--output}"[Base directory in which to create the archive.]" \
    ": :_files" \
  && return
}

_qitoolchain-package-info() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    "(-c --config)"{-c,--config}"[Name of a config to use.]:Configs:(($(qibuild list-configs 2>/dev/null | tail -n +2 | grep "^*" | cut -c3-)))" \
    "(-t --toolchain)"{-t,--toolchain}"[Name of the toolchain to use.]:Toolchains:(($(qitoolchain list 2>/dev/null | grep '*' | cut -c3-)))" \
    ": :_files" \
  && return
}

_qitoolchain-remove() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    ": :(($(qitoolchain list 2>/dev/null | grep '*' | cut -c3-)))" \
  && return
}

# TODO: add support for name of specific toolchain
_qitoolchain-remove-package() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    "(-c --config)"{-c,--config}"[Name of a config to use.]:Configs:(($(qibuild list-configs 2>/dev/null | tail -n +2 | grep "^*" | cut -c3-)))" \
    "(-t --toolchain)"{-t,--toolchain}"[Name of the toolchain to use.]:Toolchains:(($(qitoolchain list 2>/dev/null | grep '*' | cut -c3-)))" \
  && return
}

_qitoolchain-status() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    ": :(($(qitoolchain list 2>/dev/null | grep '*' | cut -c3-)))" \
  && return
}

_qitoolchain-svn-status() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    ": :(($(qitoolchain list 2>/dev/null | grep '*' | cut -c3-)))" \
  && return
}

_qitoolchain-update() {
  local curcontext=$curcontext state line ret=1
  declare -A opt_args
  _arguments_for_qibuild_logging \
  _arguments_for_qibuild_debug \
  _arguments \
    ': :(($(echo ${XDG_CONFIG_HOME-$HOME/.config}/qi/toolchains/*.xml(.N\:t\:r))))' \
  && return
}

_qitoolchain_main() {
  integer ret=1
  local curcontext=$curcontext state line
  declare -A opt_args

  _arguments -C \
    "(-h --help)"{-h,--help}"[Show this help message and exit]" \
    "(-): :->command" \
    "(-)*:: :->option-or-argument" \
    && return

  case $state in
    (command)
      _qitoolchain_commands && ret=0
      ;;
    (option-or-argument)
      curcontext=${curcontext%:*:*}:qitoolchain-$words[1]:

      _call_function ret _qitoolchain-$words[1]
      ;;
  esac
  return ret
}
_call_function ret _${service}_main
